#!/usr/bin/env ruby

require 'thor'
require 'fileutils'
require 'tilt'

# Deplot DSL

$assets_dir = Dir.pwd+"/assets"
$content_dir = Dir.pwd+"/content"
$root_dir = Dir.pwd

$tasks = []
$render_type = ""
$current_source = ""
$layout = ""
def layout file
  $layout = file
end
def render file
  $render_type = "render-single"
  $current_source = file
end
def render_all path
  $render_type = "render-all"
  $current_source = path
end
def path path, &block
  # reset
  $render_type = ""
  $current_source = ""
  $layout = "layout.erb"
  
  # set
  block.call
  
  # remember
  if $render_type == "render-all"
    $render_type = (/\#/ =~ path) ? "render-all" : "render-all-one-file"
    $tasks << [$render_type, path, $current_source, $layout]
  else
    $tasks << [$render_type, path, $current_source, $layout]
  end
end
def publish
  puts "Publishing site..."
  $tasks.each do |task|
    action, path, source, $layout = task
    content = ""
		puts " => action: " + action 
    if action == "render-single"
      
      ## R E N D E R   S I N G L E
      # Destination
      destination_dir = File.dirname path
      destination_base = File.basename path
      if /\/$/ =~ path
        destination_dir = path
        destination_base = "index.html"
      end
    
      puts "Rendering path '"+destination_dir+destination_base+"'"
      # make path
      FileUtils.mkdir_p "."+destination_dir
      unless File.directory? "."+destination_dir
        puts "  Path '"+path+"' could not be created. Skipping..."
        next
      end
    
      # Read source
      Dir.chdir $content_dir do
        unless File.exist? source
          puts "  Source file could not be found. Skipping..."
          next
        end
        content = File.read source
      end
      puts "  Read source file."
    
      # Create tilt instances
      layout_tilt = nil
      Dir.chdir $assets_dir do
        layout_tilt = Tilt.new($layout)
      end
      if layout_tilt.nil?
        puts "  Layout could not be found or rendered. Skipping..."
        next
      end
      source_tilt = nil
      Dir.chdir $content_dir do
        source_tilt = Tilt.new(source)
      end
      if source_tilt.nil?
         puts "  Source file could not be rendered. Skipping..."
         next
      end
      puts "  Created tilt instances."
    
      # Render and write
      Dir.chdir "."+destination_dir do
        File.open destination_base, "w" do |file|
					file_name = destination_base
          file.puts layout_tilt.render(Object.new, {:file_name => file_name}){
            source_tilt.render(Object.new, {:file_name => file_name})
          }
        end
      end
      puts "  Wrote to file."
    elsif action == "render-all"
      
      ## R E N D E R   A L L
      # Destination
      destination_dir = File.dirname path
      destination_base = File.basename path
      if /\/$/ =~ path
        destination_dir = path
        destination_base = "index.html"
      end
    
      puts "Rendering path/s '"+destination_dir+"/...'"
      # make path
      FileUtils.mkdir_p "."+destination_dir
      unless File.directory? "."+destination_dir
        puts "  Path '"+path+"' could not be created. Skipping..."
        next
      end
    
      # Read source
      Dir.chdir $content_dir do
        Dir.chdir source do
          # Create layout tilt instance
          layout_tilt = nil
          Dir.chdir $assets_dir do
            layout_tilt = Tilt.new($layout)
          end
          if layout_tilt.nil?
            puts "  Layout could not be found or rendered. Skipping..."
            next
          end
          Dir.glob("*").each do |content_file|
            #content = File.read content_file
            puts "  Read source file."
            
            # Create tilt instances
            source_tilt = nil
            source_tilt = Tilt.new(content_file)
            if source_tilt.nil?
               puts "  Source file could not be rendered. Skipping..."
               next
            end
            puts "  Created tilt instances."
            
            # Render and write
            Dir.chdir $root_dir+destination_dir do
              file_name = File.basename(content_file).gsub(File.extname(content_file), ".html")
							puts "  file name: " + file_name
              File.open destination_base.gsub("#", file_name), "w" do |file|
                file.puts layout_tilt.render(Object.new, {:file_name => file_name}){
                  source_tilt.render(Object.new, {:file_name => file_name})
                }
              end
            end
            puts "  Wrote to file."
          end
        end
      end
    elsif action == "render-all-one-file"
      puts "render-all-one-file"
      
      ## R E N D E R   A L L   O N E   F I L E
      # Destination
      destination_dir = File.dirname path
      destination_base = File.basename path
      if /\/$/ =~ path
        destination_dir = path
        destination_base = "#"
      end
    
      puts "Rendering path/s '"+destination_dir+"/...'"
      # make path
      FileUtils.mkdir_p "."+destination_dir
      unless File.directory? "."+destination_dir
        puts "  Path '"+path+"' could not be created. Skipping..."
        next
      end
      
      sources_rendered = []
      # Read source/s
      Dir.chdir $content_dir do
        Dir.chdir source do
          Dir.glob("*").each do |content_file|
            #content = File.read content_file
            puts "  Read source file."
            
            # Create tilt instance
            source_tilt = nil
            source_tilt = Tilt.new(content_file)
            if source_tilt.nil?
               puts "  Source file could not be rendered. Skipping..."
               next
            end
            puts "  Created tilt instance."
            sources_rendered << [content_file, source_tilt.render(Object.new, {})]
          end
        end
      end
      
      # Create layout tilt instance
      layout_tilt = nil
      Dir.chdir $assets_dir do
        layout_tilt = Tilt.new($layout)
      end
      if layout_tilt.nil?
        puts "  Layout could not be found or rendered. Skipping..."
        next
      end
      # Render and write
      Dir.chdir "."+destination_dir do
        File.open destination_base, "w" do |file|
          file.puts layout_tilt.render(Object.new, {:items => sources_rendered})
        end
      end
    end # End of action switching
  end
end

# Thor: Deplot CLI

class Deplot < Thor
  
  desc "init", "Create a new deplot project in the current directory"
  def init
    # Content directory
    puts "  Making directory '"+$content_dir+"'..."
    FileUtils.mkdir $content_dir
    # Assets directory
    puts "  Making directory '"+$assets_dir+"'..."
    FileUtils.mkdir $assets_dir
    #   Basic Layout
    Dir.chdir $assets_dir do
      File.open "layout.erb", "w" do |file|
        file.write <<-EOF
<html>
<head>
<title>Deplot Project</title>
</head>
<body>
<%= yield %>
</body>
</html>
EOF
      end
    end
    # Deplotfile
    puts "  Creating Deplotfile..."
    File.open "Deplotfile", "w" do |file|
      file.write <<-EOF
path '/' do
  render "index.markdown"
end
path '/about/' do
  render "about.markdown"
end

publish
EOF
    end
    # Guardfile
    puts "  Creating Guardfile..."
    File.open "Guardfile", "w" do |file|
      file.write <<-EOF
# CoffeeScript
guard :coffeescript, :input => 'assets', :output => '.'

# CSS <- LESS, SASS
guard :sass, :input => 'assets', :output => '.'
guard :less, :output => '.' do
watch(/^assets\\/(.+\.less)$/)
end

# Invoke deplot
guard :shell do
watch(/(assets|content)\\/(.*)/) do |m|
   `echo ""; echo "File '\#{m[2]}' changed."; deplot make`
 end
end
EOF
    end
    # Example content
    Dir.chdir $content_dir do
      File.open "index.markdown", "w" do |file|
        file.write <<-EOF
# Index page

Just some example text
EOF
      end
      File.open "about.markdown", "w" do |file|
        file.write <<-EOF
# About page

About this site
EOF
      end
    end
  end
  
  desc "new <project_name>", "Create a new deplot project"
  def new(project_name)
    if File.exist? project_name
      puts "Directory '"+project_name+"' exists already. Exiting..."
      return
    end
    puts "Creating project folder..."
    FileUtils.mkdir project_name
    $root_dir = Dir.pwd + "/" + project_name
    $assets_dir = $root_dir + "/assets"
    $content_dir = $root_dir + "/content"
    Dir.chdir project_name do
      init
    end  
    puts "Finished creating '"+project_name+"'- ready to build your site!"
  end
  
  desc "make", "Run deplot and build your project"
  def make()
    puts "Making project..."
    unless File.exist? "Deplotfile"
      puts "Deplotfile not found. Exiting..."
      return
    end
    $LOAD_PATH.unshift(Dir.pwd)
    load "Deplotfile"
  end
end
Deplot.start